x-postgres-common:
  &postgres-common
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    env_file: ".env"
    volumes:
      - logs_data:/var/log/postgresql
  postgres_primary:
    <<: *postgres-common
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - logs_data:/var/log/postgresql
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c log_replication_commands=on
      -c logging_collector=on
      -c log_statement=all
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-15-main.log
    hostname: postgres
  postgres_replica:
    <<: *postgres-common
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    ports:
      - ${DB_REPL_PORT}:${DB_REPL_PORT}
    environment:
      PGUSER: ${DB_REPL_USER}
      PGPASSWORD: ${DB_REPL_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=$DB_PORT
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary
    hostname: postgres-r
volumes:
  logs_data:
    

